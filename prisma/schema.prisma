// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  FARMER
  BUYER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  WALLET
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  role      UserRole
  farms     Farm[]
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Farm {
  id          Int       @id @default(autoincrement())
  farmName    String    @unique
  description String?
  location    String?
  farmerId    Int
  farmer      User      @relation(fields: [farmerId], references: [id])
  products    Product[]
  reviews     Review[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Product {
  id          Int         @id @default(autoincrement())
  productName String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  quantity    Int
  farm        Farm        @relation(fields: [farmId], references: [id])
  farmId      Int
  reviews     Review[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
}

model Review {
  id        Int     @id @default(autoincrement())
  comment   String
  rating    Int
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  farmId    Int?
  farm      Farm?   @relation(fields: [farmId], references: [id])
}

model Order {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  status    OrderStatus @default(PENDING)
  total     Decimal     @db.Decimal(10, 2)
  items     OrderItem[]
  payment   Payment?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique
  order         Order         @relation(fields: [orderId], references: [id])
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?       @unique
  paymentDate   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}
